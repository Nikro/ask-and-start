////////////////////////
// Useful and Re-useful mixins live here.
////////////////////////
@import "variables";

// We'll be using BEM (Block-Element-Modifier) so suck it up.

/// Block Element
/// @access public
/// @param {String} $element - Element's name
@mixin element($element) {
  &__#{$element} {
    @content;
  }
}

/// Block Modifier
/// @access public
/// @param {String} $modifier - Modifier's name
@mixin modifier($modifier) {
  &--#{$modifier} {
    @content;
  }
}

/// Font - define default font with weight parameter.
/// @access public
/// @param {String} $weight - Font weight
@mixin font-roboto($weight: 500) {
  font-family: "Roboto";
  font-weight: $weight;
}

/* ************************************** */
/* **** REM CONVERSIONS AND RELATED ***** */
/* ************************************** */
$rem-baseline: $base-font-size !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function rem-separator($list) {
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin material-card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: material-bottom-shadow($depth), material-top-shadow($depth);
  }
  @include border-radius(2px);
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function material-top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function material-bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

@mixin responsive-img {
  max-width:100%;
  width:100%;
  @include background-size(100%);
  position: relative;
  height:auto;
}
@mixin link-with-img {
  display: inline-block;
  position: relative;
  line-height: 0;

  @include icon(after, search) {
    position: absolute;
    color: $txt-color-neutral;
    font-size: 1.5rem;
    top: 25px;
    left: 15px;
  }
  &:before {
    position: absolute;
    background: $color-overlay;
    @include opacity(0.5);
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    content: "";
    @include border-radius(3px);
  }
  img {
    @include border-radius(3px);
  }
}

@mixin font-size($font-size: normal, $font-weight: normal, $font-style: normal) {
  @if $font-size == small {
    @include adjust-font-size-to(12px);
  } @else if $font-size == normal {
    @include adjust-font-size-to(16px);
  } @else if $font-size == bigger {
    @include adjust-font-size-to(20px);
  } @else if $font-size == big {
    @include adjust-font-size-to(24px);
  } @else if $font-size == huge {
    @include adjust-font-size-to(30px);
  }
  font-weight: $font-weight;
  font-style: $font-style;
}

@mixin v-align-center() {
  position: absolute;
  left: 0;
  top: 50%;
  @include translateY(-50%);
}
